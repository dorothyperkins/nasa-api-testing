{
  "info": {
    "_postman_id": "b1a1e1b1-1111-2222-3333-444444444444",
    "name": "NASA Open APIs \u2013 Testing Demo (Fixed)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Resilient tests & CI for NASA Open APIs (handles APOD gaps and EPIC 503)."
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "function fmt(d) { return new Date(d.getTime() - d.getTimezoneOffset()*60000).toISOString().slice(0,10); }",
          "const DAY = 24*60*60*1000;",
          "",
          "// Use two days ago (UTC) for APOD to avoid processing gaps",
          "if (!pm.environment.get(\"date\")) {",
          "  const d = new Date(Date.now() - 2*DAY);",
          "  pm.environment.set(\"date\", fmt(d));",
          "}",
          "",
          "// Use a 3-day window ending two days ago for NeoWs",
          "if (!pm.environment.get(\"start_date\") || !pm.environment.get(\"end_date\")) {",
          "  const end = new Date(Date.now() - 2*DAY);",
          "  const start = new Date(end.getTime() - 2*DAY);",
          "  pm.environment.set(\"start_date\", fmt(start));",
          "  pm.environment.set(\"end_date\", fmt(end));",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "APOD (Astronomy Picture of the Day)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/planetary/apod?date={{date}}&api_key={{api_key}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "planetary",
            "apod"
          ],
          "query": [
            {
              "key": "date",
              "value": "{{date}}"
            },
            {
              "key": "api_key",
              "value": "{{api_key}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status is 200 or 404 when APOD not yet published\", function () {",
              "  pm.expect([200,404]).to.include(pm.response.code);",
              "});",
              "let apod = {};",
              "try { apod = pm.response.json(); } catch(e){}",
              "if (pm.response.code === 200) {",
              "  pm.test(\"Response includes required fields\", function () {",
              "    pm.expect(apod).to.have.property(\"date\");",
              "    pm.expect(apod).to.have.property(\"media_type\");",
              "  });",
              "  pm.test(\"Date matches requested date\", function () {",
              "    pm.expect(apod.date).to.eql(pm.environment.get(\"date\"));",
              "  });",
              "  pm.test(\"If media_type is image, url should exist\", function () {",
              "    if (apod.media_type === \"image\") {",
              "      pm.expect(apod).to.have.property(\"url\");",
              "    }",
              "  });",
              "}",
              "pm.test(\"Responded under 3000 ms\", function () {",
              "  pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "APOD (Missing API Key \u2013 Negative)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/planetary/apod?date={{date}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "planetary",
            "apod"
          ],
          "query": [
            {
              "key": "date",
              "value": "{{date}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Missing API key yields 400/401/403\", function () {",
              "  pm.expect([400,401,403]).to.include(pm.response.code);",
              "});",
              "let errTxt = pm.response.text().toLowerCase();",
              "let errJson = {};",
              "try { errJson = pm.response.json(); } catch(e){}",
              "pm.test(\"Response explains auth problem (code/message)\", function () {",
              "  const hasText = errTxt.includes(\"api key\") || errTxt.includes(\"api_key\");",
              "  const hasJson = errJson && errJson.error && (String(errJson.error.code||\"\").toLowerCase().includes(\"api\") || String(errJson.error.message||\"\").toLowerCase().includes(\"key\"));",
              "  pm.expect(hasText || hasJson).to.be.true;",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Asteroids NeoWs \u2013 Feed",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/neo/rest/v1/feed?start_date={{start_date}}&end_date={{end_date}}&api_key={{api_key}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "neo",
            "rest",
            "v1",
            "feed"
          ],
          "query": [
            {
              "key": "start_date",
              "value": "{{start_date}}"
            },
            {
              "key": "end_date",
              "value": "{{end_date}}"
            },
            {
              "key": "api_key",
              "value": "{{api_key}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status is 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "var neowsResp = pm.response.json();",
              "pm.test(\"element_count matches computed total\", function () {",
              "  var neo = neowsResp.near_earth_objects || {};",
              "  var sum = 0;",
              "  Object.keys(neo).forEach(function(k){ sum += Array.isArray(neo[k]) ? neo[k].length : 0; });",
              "  pm.expect(neowsResp.element_count).to.eql(sum);",
              "});",
              "pm.test(\"near_earth_objects contains start_date key\", function () {",
              "  var start = pm.environment.get(\"start_date\");",
              "  pm.expect(Object.keys(neowsResp.near_earth_objects)).to.include(start);",
              "});",
              "pm.test(\"Window length is <= 7 days\", function () {",
              "  var keys = Object.keys(neowsResp.near_earth_objects || {});",
              "  pm.expect(keys.length).to.be.below(8);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Mars Rover Photos \u2013 Curiosity by Earth Date",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/mars-photos/api/v1/rovers/curiosity/photos?earth_date={{mrp_date}}&api_key={{api_key}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "mars-photos",
            "api",
            "v1",
            "rovers",
            "curiosity",
            "photos"
          ],
          "query": [
            {
              "key": "earth_date",
              "value": "{{mrp_date}}"
            },
            {
              "key": "api_key",
              "value": "{{api_key}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status is 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "var mrpResp = pm.response.json();",
              "pm.test(\"photos is an array\", function () {",
              "  pm.expect(mrpResp).to.have.property(\"photos\");",
              "  pm.expect(Array.isArray(mrpResp.photos)).to.be.true;",
              "});",
              "if ((mrpResp.photos||[]).length > 0) {",
              "  var p = mrpResp.photos[0];",
              "  pm.test(\"Photo has required fields\", function () {",
              "    pm.expect(p).to.have.property(\"id\");",
              "    pm.expect(p).to.have.property(\"img_src\");",
              "    pm.expect(p).to.have.nested.property(\"camera.name\");",
              "    pm.expect(p).to.have.nested.property(\"rover.name\");",
              "  });",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "EPIC \u2013 Latest Natural Images (metadata)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/EPIC/api/natural?api_key={{api_key}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "EPIC",
            "api",
            "natural"
          ],
          "query": [
            {
              "key": "api_key",
              "value": "{{api_key}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status is 200 or temporary 503\", function () {",
              "  pm.expect([200,503]).to.include(pm.response.code);",
              "});",
              "if (pm.response.code === 200) {",
              "  var epic = pm.response.json();",
              "  pm.test(\"Array of metadata items returned (may be empty)\", function () {",
              "    pm.expect(Array.isArray(epic)).to.be.true;",
              "  });",
              "  if ((epic||[]).length > 0) {",
              "    var i = epic[0];",
              "    pm.test(\"EPIC item has image and date\", function () {",
              "      pm.expect(i).to.have.property(\"image\");",
              "      pm.expect(i).to.have.property(\"date\");",
              "    });",
              "  }",
              "} else {",
              "  console.warn(\"EPIC service 503 \u2013 treated as transient; not failing the suite.\");",
              "}"
            ]
          }
        }
      ]
    }
  ]
}